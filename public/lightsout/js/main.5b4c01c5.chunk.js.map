{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","rows","nrows","cols","ncols","r","row","c","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","determineIfWon","setState","length","_this2","console","log","ri","ci","src_Cell_0","flipCellsAround","concat","key","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b4c01c5.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.5\n  }\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n\n    let rows = this.props.nrows;\n    let cols = this.props.ncols;\n    for (let r = 0; r < rows; r++){\n      let row = [];\n      for (let c = 0; c < cols; c++){\n        row.push(Math.random() <= this.props.chanceLightStartsOn ? true : false);\n      }\n      board.push(row);\n    }\n    \n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    \n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y-1, x);\n    flipCell(y+1, x);\n    flipCell(y, x-1);\n    flipCell(y, x+1);\n\n    var hasWon = this.determineIfWon(board);\n\n    this.setState({board: board, hasWon: hasWon});\n  }\n\n  determineIfWon(board) {\n    for (let x = 0; x < board.length; x++){\n      for (let y = 0; y < x.length; y++){\n        if (y === false) return false;\n      }\n    }\n    return true;\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    console.log(this.state.board);\n    // if the game is won, just show a winning msg & render nothing else\n\n    return (\n      <table className=\"Board\">\n        {this.state.board.map((r, ri) => <tbody>\n          {r.map((c, ci) => <td>\n            <Cell isLit={c} flipCellsAroundMe={this.flipCellsAround.bind(this, `${ri}-${ci}`)} key={`${ri}-${ci}`}/>\n          </td>)}\n        </tbody>)}\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}